#!/usr/bin/env python
# coding: utf-8


from casadi import *
import matplotlib.pyplot as plt
import numpy as np
import sys

#############################For Plotting#######################################################
class Car:
    
    def __init__(self):  # __init__ constructor gets called whenever any object is instantiated
        # car dimensions
        # whenever any object using Car class will be instantiated --> object = Car ()
        # it will create an object with attributes --> object.c1, object.c2, object.c3, object.c4 
        # The attributes will have the following values
        self.c1 = np.array([0.5,0.25])
        self.c2 = np.array([-0.5,0.25])
        self.c3 = np.array([-0.5,-0.25])
        self.c4 = np.array([0.5,-0.25])
    
    def rotate(self,theta,point):
        # create a function to transform a 2D point using Rotation Matrices
        # theta = angle of rotation ; 
        # point = point on a 2D plane ready to undergo rotation expressed as a 2-D Vector;

        R = np.array([[np.cos(theta),-np.sin(theta)],[np.sin(theta),np.cos(theta)]])
        # R = 2 x 2  Rotation Matrix aka DCM Matrix for a rotation of theta  
        # new point after rotation = DCM matrix * Old point
        # .ravel() = creates a flat array
        return np.matmul(R,point.reshape(-1,1)).ravel()
    
    def body(self,pose):
        # get the car pose and orientation for plotting using controller outputs
        pose=pose.ravel()
        # add the new position to the old position after rotation
        C1 = pose[:2] + self.rotate(pose[2],self.c1)
        C2 = pose[:2] + self.rotate(pose[2],self.c2)
        C3 = pose[:2] + self.rotate(pose[2],self.c3)
        C4 = pose[:2] + self.rotate(pose[2],self.c4)
        return np.array([C1,C2,C3,C4])
    def plot(self,pose):
        # plotting the car shape
        C=self.body(pose)
        plt.plot([C[0,0],C[1,0]],[C[0,1],C[1,1]], color='k', linewidth=2)
        plt.plot([C[1,0],C[2,0]],[C[1,1],C[2,1]], color='k', linewidth=2)
        plt.plot([C[2,0],C[3,0]],[C[2,1],C[3,1]], color="k", linewidth=2)
        plt.plot([C[3,0],C[0,0]],[C[3,1],C[0,1]], color='r', linewidth=2)
        plt.axis('equal')
        plt.axis([-10,10,-10,10])

        plt.pause(1e-6)
        plt.cla()
#######################################################################################################

######################## Setup the states, controls problem, their symbols & ODE ########################
# states [x,y,theta]
# control [forward velocity and angular rate]=>[u_0,u_1]
x = MX.sym("x") # create a symbolic variable x,y, theta
y = MX.sym("y")
theta = MX.sym("theta")
state = vertcat(x,y,theta) # store all symbolic variables in a symbolic state "state"
U  = MX.sym('U',2,1) # Controls vector 2 x 1 (linear velocity, angular velocity)

Q = MX.eye(3) #weight matrix for state
R = 1*MX.eye(2) #weight matrix for control effort

ode = vertcat(U[0]*cos(theta),U[0]*sin(theta),U[1]) #create the differential eqn describing evolution of states
f = Function('f',[state,U],[ode],['Z','U'],['Z_next'])#just a function named as "f" with input [state,U] output [ode]
# print ("function value",f([0,0,0,0],10))
##############################################################################################################

######## MPC Parameters ####################################################
T = 3 # Time horizon
N = 50 # Prediction horizon (look ahead steps)
############################################################################

###########Prepping the Reference Values####################################
n_states = 3   #Total no. of states
n_control = 2  #Total no. of Control knobs
ref=np.loadtxt("pose.txt") #get pose reference from file
length = int(ref.shape[0])
ref_last_val = ref[-1,:]
aug_ref = np.zeros((length+N,n_states))
aug_ref[0:1000,:] = ref

for jj in range(N):
    aug_ref[1000+jj,:] = ref_last_val

#############################################################################

######## Fixed step Runge-Kutta 4 integrator ################################
M = 4 # RK4 steps per interval
X0  = MX.sym('X0',n_states,1) #create an empty symbolic array
X_next = X0
DT = T/N/M #time step

for j in range(M):
    k1 = f(X_next, U)
    k2 = f(X_next + DT/2 * k1, U)
    k3 = f(X_next + DT/2 * k2, U)
    k4 = f(X_next + DT * k3, U)
    X_next = X_next + DT/6*(k1 +2*k2 +2*k3 +k4)

# State Propogation   x(k+1) = f(x(k),u(k)) //  x_dot(t) = f(x(t),u(t))
F = Function('F', [X0, U], [X_next],['x0','p'],['xf']) 
# F takes current state & control effort as inputs and the next state is the output
###################################################################################




############# Building NMPC cost and constraints ##################################

opti = casadi.Opti()

#optimization variable
X = opti.variable(3,N+1)
u = opti.variable(2,N)
#parameters of optimization function
init_cond = opti.parameter(3,1)
Xref = opti.parameter(3,N+1)

#cost definition
cost=0
for k in range(N):
    error =X[:,k]-Xref[:,k]
    #cost+=error.T@Q@error + u[:,k].T@R@u[:,k]   #with minimum control effort consideration
    cost+=error.T@Q@error #without minimum control effort consideration

opti.minimize(cost)

#path constraints
for k in range(N):
  opti.subject_to(X[:,k+1] == F(X[:,k],u[:,k]))
# boundary constraint (initial condition)
opti.subject_to(X[:,0] == init_cond)
#input constraint
opti.subject_to(opti.bounded(-5,u,5))


#optimization options
opts = {}
# opts["qpsol"] = 'qrqp'
# opts["print_header"] = False
# opts["print_iteration"] = False
# opts["print_time"] = False
# opts["qpsol_options"] = {"print_iter":False}
# opts["qpsol_options"] = {"print_header":False}
# opts["qpsol_options"] = {"print_info":False}

# opti.solver('sqpmethod',opts)
opti.solver('ipopt',opts) #using the ipopt solver 


M = opti.to_function('M',[init_cond,Xref],[u])
#################################################################################




#X0 = ref[0,:].reshape(-1,1)  #initial condition
X0 = np.array([4,1,1.5]).reshape(3,1) # random initial condition
X_log = []   #list to store all values of state X
X_log.append(X0.reshape(3,1)) #store the 1st value as initial condition
U_log = []   #list to store all values of control effort U
car = Car()  #create an object


for i in range(length):
    Uk = np.array(M(X0,aug_ref[i:i+N+1,:].T).full()) #get the control values for the entire prediction horizon
    # print ("Uk",Uk.shape)
    X_traj = [] #create an empty list to store trajectories
    U_log.append(np.array(Uk[:,0]).reshape(2,1))  #store the value of 1st control effort in the horizon
    

    # simulate system
    #get the entire value of states in the horizon
    for j in range(Uk.shape[1]):
        X0 = F(X0,Uk[:,j]).full()*1 #compute state
        X_traj.append(X0)           #store the computed state
    X_traj=np.array(X_traj).reshape(-1,3)  #reshape trajectory
    X0=X_traj[0,:]#get the 1st state in the horizon


    
    X_log.append(X0.reshape(3,1)) #store the new state
    

    plt.plot(X_traj[:,0],X_traj[:,1], color='b')
   
    

    car.plot(X0)

    print("This is iteration number",i)









# create numpy array from list and write them to external files
X_log = np.array(X_log).reshape(length+1,n_states) # 1 is extra for initial condition
U_log = np.array(U_log).reshape(length,n_control)
np.savetxt("X_log.txt",X_log)
np.savetxt("U_log.txt",U_log)
print (X_log.shape,U_log.shape)
##################################################################

# create respective time grids for plotting results ###############
tgrid_mpc = np.arange(0,X_log.shape[0])
tgrid_effort = np.arange(0,U_log.shape[0])
print (tgrid_mpc.shape,X_log.shape)
####################################################################


################### Plotting Results ###############################
plt.figure(2)
plt.plot(tgrid_mpc,aug_ref[0:length+1,0],label="x_ref")
plt.plot(tgrid_mpc,X_log[:,0],label="x_actual")
plt.legend()
plt.show()

plt.figure(3)
plt.plot(tgrid_mpc,aug_ref[0:length+1,1],label="y_ref")
plt.plot(tgrid_mpc,X_log[:,1],label="y_actual")
plt.legend()
plt.show()

plt.figure(4)
plt.plot(tgrid_mpc,aug_ref[0:length+1,2],label="theta_ref")
plt.plot(tgrid_mpc,X_log[:,2],label="theta_actual")
plt.legend()
plt.show()

plt.figure(5)
plt.plot(aug_ref[0:1000+1,0],aug_ref[0:length+1,1],label="XY_ref")
plt.plot(X_log[:,0],X_log[:,1],label="XY_actual")
plt.legend()
plt.show()

plt.figure(6)
plt.plot(tgrid_effort,U_log[:,0],label="Control_Effort_1")
plt.legend()
plt.show()

plt.figure(7)
plt.plot(tgrid_effort,U_log[:,1],label="Control_Effort_2")
plt.legend()
plt.show()


